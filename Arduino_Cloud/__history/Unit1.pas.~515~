unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, REST.Types, System.Rtti,
  System.Bindings.Outputs, Vcl.Bind.Editors, Data.Bind.EngExt,
  Vcl.Bind.DBEngExt, Vcl.StdCtrls, Data.Bind.Components, Data.Bind.DBScope,
  Data.DB, Datasnap.DBClient, REST.Response.Adapter, REST.Client,
  Data.Bind.ObjectScope,Json, REST.Authenticator.OAuth, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Imaging.pngimage, Vcl.ExtCtrls, Vcl.Grids,
  VclTee.TeeGDIPlus, VCLTee.TeEngine, VCLTee.TeeProcs, VCLTee.Chart,
  VCLTee.Series, Vcl.ComCtrls,dateutils;

type
  TForm1 = class(TForm)
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    RESTResponseDataSetAdapter1: TRESTResponseDataSetAdapter;
    ClientDataSet1: TClientDataSet;
    BindSourceDB1: TBindSourceDB;
    BindingsList1: TBindingsList;
    Edit1: TEdit;
    Edit2: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Memo2: TMemo;
    Button2: TButton;
    Memo1: TMemo;
    Memo3: TMemo;
    RESTClient2: TRESTClient;
    RESTRequest2: TRESTRequest;
    RESTResponse2: TRESTResponse;
    LinkControlToField1: TLinkControlToField;
    Button3: TButton;
    RESTClient3: TRESTClient;
    RESTRequest3: TRESTRequest;
    RESTResponse3: TRESTResponse;
    Button4: TButton;
    Memo4: TMemo;
    LinkControlToField2: TLinkControlToField;
    Edit5: TEdit;
    Edit6: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    Button5: TButton;
    ComboBox1: TComboBox;
    Button1: TButton;
    ListBox1: TListBox;
    Label7: TLabel;
    StringGrid1: TStringGrid;
    Chart1: TChart;
    DateTimePicker1: TDateTimePicker;
    Label3: TLabel;
    Label4: TLabel;
    Memo5: TMemo;
    Edit3: TEdit;
    Label8: TLabel;
    Button6: TButton;
    Memo6: TMemo;
    TrackBar1: TTrackBar;
    TrackBar2: TTrackBar;
    CheckBox1: TCheckBox;
    Label9: TLabel;
    ComboBox2: TComboBox;
    Label10: TLabel;
    Series1: TLineSeries;
    Series2: TLineSeries;
    Series3: TLineSeries;
    Series4: TLineSeries;
    Series5: TLineSeries;
    Series6: TLineSeries;
    TrackBar3: TTrackBar;
    CheckBox2: TCheckBox;
    Edit4: TEdit;
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure ListBox1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure TrackBar1Change(Sender: TObject);
    procedure TrackBar2Change(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure TrackBar3Change(Sender: TObject);
    procedure CheckBox2Click(Sender: TObject);
    procedure Edit4Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}


// Client     ID: gOMrZAfW1byqBzvqBEGJpAN2mC2TWSkj
// Client Secret: zkxPC31zCa0QSwt2SRxKIb5onw9n5GmmNWenepSAcA0sQmTLUh1bZagHHODqBBd6

//pid       : 8e7b2151-bd30-47a5-8122-7183560bcb1f
//device id : 962e377b-0c55-40f0-9895-4bf286eb8468




function gettoken():widestring;
var
jsonStr   : WideString;
success   : Integer;
client    : TRestClient;
request   : TRestRequest;
response  : TRestResponse;
dataset   : TClientDataset;
adapter   : TRESTResponseDataSetAdapter;
i,j       : integer;
LJSON1    : TJSONObject;
token     : Tmemo;
begin
  client        := TRestClient.Create(nil);
  request       := TRestRequest.Create(nil);
  response      := TRestResponse.Create(nil);
  dataset       := TClientDataset.Create(nil);
  adapter       := TRESTResponseDataSetAdapter.Create(nil);
  LJson1         := TJSONObject.Create;

  LJSON1.AddPair(TJSONPair.Create('client_id', form1.Edit1.Text));
  LJSON1.AddPair(TJSONPair.Create('client_secret', form1.Edit2.Text));
  LJSON1.AddPair(TJSONPair.Create('audience', 'https://api2.arduino.cc/iot'));
  LJSON1.AddPair(TJSONPair.Create('grant_type','client_credentials'));

  request.Client        := client;
  request.Response      := response;
  adapter.Dataset       := dataset;
  adapter.RootElement   :='';
  adapter.Response      := response;
  adapter.Active        := true;
  request.Timeout       := 0;
  request.Method        := rmPOST;

  Request.AddBody(LJson1);

  client.BaseURL        := 'https://api2.arduino.cc/iot/v1/clients/token'; ///limit products tot MAX
  client.contenttype    := 'application/x-www-form-urlencoded';

  try

    request.Execute;

    dataset.first;
  while not DataSet.Eof do
      begin

       result := DataSet.FieldByName('access_token').value;
      // form1.Edit5.Text:=  DataSet.FieldByName('expires_in').Value;
      // form1.Edit6.Text:=  DataSet.FieldByName('token_type').Value;
       exit;
       dataset.Next;
      end;

     result := '';


    form1.memo3.Lines.Text:= request.Response.JSONText;

  except



     result := '';

  end;

  client.Free;
  request.Free;
  response.Free;
  dataset.Free;
  adapter.Free;

end;


function getDevicesproperty(deviceid:string):string;
var
jsonStr   : WideString;
success   : Integer;
client    : TRestClient;
request   : TRestRequest;
response  : TRestResponse;
dataset   : TClientDataset;
adapter   : TRESTResponseDataSetAdapter;
i,j, count: integer;
LJSON1    : TJSONObject;
devlist   :TStringlist;
token: string;
begin
  client        := TRestClient.Create(nil);
  request       := TRestRequest.Create(nil);
  response      := TRestResponse.Create(nil);
  dataset       := TClientDataset.Create(nil);
  adapter       := TRESTResponseDataSetAdapter.Create(nil);
  LJson1        := TJSONObject.Create;

  token := form1.memo3.lines.text;  //toker full in memo3

  request.Client        := client;
  request.Response      := response;
  adapter.Dataset       := dataset;
  adapter.RootElement   := '';
  adapter.Response      := response;
  adapter.Active        := true;

  adapter.NestedElements:= true;

  request.Timeout       := 0;
  request.Method        := rmGET;

                 //deviceid device ID from devices
  client.BaseURL        := 'https://api2.arduino.cc/iot/v2/things/'+deviceid+'/properties';
  client.contenttype    := 'application/x-www-form-urlencoded';

  with Request.Params.AddItem do
begin
  Kind    := TRESTRequestParameterKind.pkHTTPHEADER;
  Name    := 'Authorization';
  Value   := 'Bearer '+token;
  Options := Options + [TRESTRequestParameterOption.poDoNotEncode];
end;

  try

    request.Execute;

    dataset.GetFieldNames(form1.combobox1.Items);

    count:=0;
    dataset.first;
  while not DataSet.Eof do
      begin
       form1.Memo1.Lines.Add(DataSet.FieldByName('id').Value+';'+DataSet.FieldByName('name').Value+';') ;
       form1.Edit6.Text := DataSet.FieldByName('id').Value;
       count := count+1;
       dataset.Next;
      end;


     form1.memo2.Lines.add(request.Response.JSONText);
  except

    form1.memo2.Lines.add(request.Response.JSONText);


 end;


  client.Free;
  request.Free;
  response.Free;
  dataset.Free;
  adapter.Free;

end;


function getDevices():string;
var
jsonStr   : WideString;
success   : Integer;
client    : TRestClient;
request   : TRestRequest;
response  : TRestResponse;
dataset   : TClientDataset;
adapter   : TRESTResponseDataSetAdapter;
i,j, count: integer;
LJSON1    : TJSONObject;
devlist   :TStringlist;
token: string;
begin
  client        := TRestClient.Create(nil);
  request       := TRestRequest.Create(nil);
  response      := TRestResponse.Create(nil);
  dataset       := TClientDataset.Create(nil);
  adapter       := TRESTResponseDataSetAdapter.Create(nil);
  LJson1        := TJSONObject.Create;

  token := form1.memo3.lines.text;  //toker full in memo3

  request.Client        := client;
  request.Response      := response;
  adapter.Dataset       := dataset;
  adapter.RootElement   := '';
  adapter.Response      := response;
  adapter.Active        := true;

  adapter.NestedElements:= true;

  request.Timeout       := 0;
  request.Method        := rmGET;


  client.BaseURL        := 'https://api2.arduino.cc/iot/v2/things/'; ///limit products tot MAX
  client.contenttype    := 'application/x-www-form-urlencoded';

  with Request.Params.AddItem do
begin
  Kind    := TRESTRequestParameterKind.pkHTTPHEADER;
  Name    := 'Authorization';
  Value   := 'Bearer '+token;
  Options := Options + [TRESTRequestParameterOption.poDoNotEncode];
end;

  try
    form1.ListBox1.Clear;
    request.Execute;

    dataset.GetFieldNames(form1.combobox1.Items);

    form1.stringgrid1.RowCount:= dataset.RecordCount;

    count:=0;
    dataset.first;
  while not DataSet.Eof do
      begin
       form1.Memo1.Lines.Add(DataSet.FieldByName('id').Value+' | '+DataSet.FieldByName('name').Value )  ;

       form1.ListBox1.Items.Add(DataSet.FieldByName('name').Value);

       form1.StringGrid1.Cells[0,count]:=DataSet.FieldByName('name').Value;
       form1.StringGrid1.Cells[1,count]:=DataSet.FieldByName('id').Value;

       count := count+1;
       dataset.Next;
      end;


     form1.memo2.Lines.add(request.Response.JSONText);
  except

    form1.memo2.Lines.add(request.Response.JSONText);


 end;


  client.Free;
  request.Free;
  response.Free;
  dataset.Free;
  adapter.Free;

end;



function gethistoricdata():string;
var
jsonStr   : WideString;
success   : Integer;
client    : TRestClient;
request   : TRestRequest;
response  : TRestResponse;
dataset   : TClientDataset;
adapter   : TRESTResponseDataSetAdapter;
LJSON1    : TJSONObject;
token     : string;
cleandate,cleandate2 : string;
date1,date2,date3: string;
dag,dagold,tijd       : string;
list1,list2: Tstrings;
tijd2 : TDateTime;
daycounter: integer;
myHour, myMin, mySec, myMilli : Word;
i:integer;
 records:integer;
begin
  client        := TRestClient.Create(nil);
  request       := TRestRequest.Create(nil);
  response      := TRestResponse.Create(nil);
  dataset       := TClientDataset.Create(nil);
  adapter       := TRESTResponseDataSetAdapter.Create(nil);
  LJson1        := TJSONObject.Create;
  list1:= TStringList.Create; ////to trim date
  list2:= TStringList.Create; ///to trim day


  token := form1.memo3.lines.text;  //token response

  request.Client        := client;
  request.Response      := response;
  adapter.Dataset       := dataset;
  adapter.RootElement   := 'data';
  adapter.Response      := response;
  adapter.Active        := true;
  request.Timeout       := 0;
  request.Method        := rmGET;


  client.BaseURL        := 'https://api2.arduino.cc/iot/v2/things/'+form1.edit5.text+'/properties/'+form1.Edit6.text+'/timeseries?desc=false&from='+FormatDateTime('yyy-mm-dd',form1.DateTimePicker1.Date)+'T22:00:00Z&interval='+Form1.Edit3.text+'&to='+FormatDateTime('yyy-mm-dd',IncDay(Form1.DateTimePicker1.Date,STrToInt(Form1.combobox2.text)))+'T8:00:00Z'; ///limit products tot MAX
  client.contenttype    := 'application/x-www-form-urlencoded';

  with Request.Params.AddItem do
begin
  Kind    := TRESTRequestParameterKind.pkHTTPHEADER;
  Name    := 'Authorization';
  Value   := 'Bearer '+token;
  Options := Options + [TRESTRequestParameterOption.poDoNotEncode];
end;

  try
    daycounter := 0;
    request.Execute;
     i:= 0;

    form1.label9.caption := IntToSTR(Round(dataset.RecordCount/3));
    records:=  Round(dataset.RecordCount/STrToInt(Form1.combobox2.text));

    dataset.first;
  while not DataSet.Eof do
      begin
         list1:= TStringList.Create; ////to trim date
         list2:= TStringList.Create; ///to trim day


       cleandate := DataSet.FieldByName('time').value;
       cleandate := StringReplace(cleandate, 'T', ' ', [rfReplaceAll, rfIgnoreCase]);
       cleandate := StringReplace(cleandate, 'Z', ' ', [rfReplaceAll, rfIgnoreCase]);
       cleandate2:= cleandate;

       ExtractStrings(['-'], [' '], PChar(cleandate2), List1);
       ExtractStrings([' '], [' '], PChar(list1[2]), List2);
       dag  := list2[0];
       tijd := list2[1];

       tijd2 := STrToTime(tijd);

     ///

       Cleandate := TimeToStr(tijd2);

      // 0   clWebMediumTurquoise
      // 1   clWebTurquoise
      // 2   clWebCyan
      // 3   clWebPowderBlue
      // 4   clWebSkyBlue
      // 5   clWebRoyalBlue


         if (daycounter = 0 ) then
         begin
         if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
              form1.series1.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebMediumTurquoise);
             end;
         end;

         if (daycounter = 1 ) then
         begin
          if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
              form1.series2.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebTurquoise);
            end;
         end;

         if (daycounter = 2 ) then
         begin
          if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
                form1.series3.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebCyan);
              end;
         end;

         if (daycounter = 3 ) then
         begin
         if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
              form1.series4.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebPowderBlue);
            end;
         end;

         if (daycounter = 4 ) then
         begin
         if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
              form1.series5.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebSkyBlue);
            end;
         end;

        if (daycounter = 5 ) then
         begin
         if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
             begin
              form1.series6.Add(DataSet.FieldByName('value').Value,TimeToStr(tijd2),clWebRoyalBlue );
            end;
         end;



       DecodeTime(tijd2, myHour, myMin, mySec, myMilli);


//         if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true ) then
//             begin
//               form1.memo6.lines.add(cleandate2 +' - '+ dag+' - '+ tijd+' -'+TimeToStr(tijd2)+' - '+IntToSTR(daycounter)+' - '+TimeTostr(tijd2))  ;
//
//                if (TimeInRange(tijd2, StrToTime('07:45:00'),StrTotime('08:30:00')) = true ) then
//                  begin
//                    daycounter := daycounter+1;
//                  end;
//
//             end;




       // if (TimeInRange(tijd2, StrToTime('21:00:00'),StrTotime('08:00:00')) = true)  then
       //    begin


            if ((i = records) ) then
              begin
                daycounter:= daycounter+1;
                i:= 0;
              end;

            form1.memo6.lines.add(cleandate2 +' - '+ dag+' - '+ tijd+' -'+TimeToStr(tijd2)+' - '+IntToSTR(daycounter)+' - '+TimeTostr(tijd2))  ;

        dagold := dag;
        i:= i +1;
       //form1.memo6.lines.add(cleandate2 +' - '+ dag+' - '+ tijd);    ///



       //dag1 series 1
      // if (dag = '26') then
      //      begin
             // form1.series1.Add(DataSet.FieldByName('value').Value,cleandate,clred);
      //      end;

      //dag2 series 2
//       if (dag = '27') then
//            begin
//                form1.series2.Add(DataSet.FieldByName('value').Value,cleandate,clblue);
//            end;
       //dag3 series 3
//       if (dag = '28') then
//            begin
//                form1.series3.Add(DataSet.FieldByName('value').Value,cleandate,clgreen);
//            end;
       //dag4 series 4
//       if (dag = '29') then
//            begin
//                form1.series4.Add(DataSet.FieldByName('value').Value,cleandate,clpurple);
//            end;
       //dag5 series 5





       dag:='';
         list1.Free;
         list2.Free;


       dataset.Next;
      end;

     result := '';

      form1.memo1.Lines.add(request.Response.JSONText);
  except

    form1.memo1.Lines.add(request.Response.JSONText);

    result := '';
 end;


  client.Free;
  request.Free;
  response.Free;
  dataset.Free;
  adapter.Free;

end;




procedure TForm1.Button1Click(Sender: TObject);
begin
memo2.Clear;
edit6.Clear;
getDevicesproperty(edit5.text);
end;

procedure TForm1.Button2Click(Sender: TObject);
var
i:integer;
begin
  for i:=0 to Chart1.SeriesCount-1 do
begin
  Chart1.Series[i].Clear;
end;

gethistoricdata();
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
memo5.lines[0]:= edit1.Text;
memo5.lines[1]:= edit2.Text;
memo5.lines.SaveToFile('key.txt');

restrequest2.AddParameter('client_id',form1.Edit1.Text);
restrequest2.AddParameter('client_secret',form1.Edit2.Text);
restrequest2.AddParameter('audience','https://api2.arduino.cc/iot');
restrequest2.AddParameter('grant_type','client_credentials');


restrequest2.Execute;
sleep(200);
button5.Click; ///get devices
end;

procedure TForm1.Button4Click(Sender: TObject);
var
token:widestring;
thingid, propid:string;
begin
//thingid :='0b6894e0-480f-4a54-9c8f-1affb4ed7762';
//propid  :='8e7b2151-bd30-47a5-8122-7183560bcb1f';

thingid :=edit5.text;
propid  :=edit6.Text;

restclient3.BaseURL:='https://api2.arduino.cc/iot/v2/things/'+thingid+'/properties/'+propid+'/timeseries?desc=true&from=2022-08-26T00:00:00Z&interval=1000&to=2022-08-26T07:00:00Z';
token := memo3.lines.text;

with RESTRequest3.Params.AddItem do
begin
  Kind    := TRESTRequestParameterKind.pkHTTPHEADER;
  Name    := 'Authorization';
  Value   := 'Bearer '+token;
  Options := Options + [TRESTRequestParameterOption.poDoNotEncode];
end;

restrequest3.AutoCreateParams:=true;
Restrequest3.Execute;

memo1.Lines.Text:= restrequest3.Response.Content;
memo1.Lines.Add(restrequest3.Params[0].tostring);
end;

procedure TForm1.Button5Click(Sender: TObject);
begin
edit5.clear;
edit6.Clear;
memo1.Clear;     //clearlog
memo2.Clear;     //clearlog

getDevices();
//button2.Click;    ///create chart
end;


procedure Split(Delimiter: Char; Str: string; ListOfStrings: TStrings) ;
begin
   ListOfStrings.Clear;
   ListOfStrings.Delimiter       := Delimiter;
   ListOfStrings.StrictDelimiter := True; // Requires D2006 or newer.
   ListOfStrings.DelimitedText   := Str;
end;


procedure TForm1.Button6Click(Sender: TObject);
var
dagt: TDateTime;
dag : string;
cleandate : string;
list,list2 : Tstrings;
begin
   list:= TStringList.Create;
   list2:= TStringList.Create;

   cleandate:= '2022-09-01 00:01:02';
   ExtractStrings(['-'], [' '], PChar(cleandate), List);
   ExtractStrings([' '], [' '], PChar(list[2]), List2);
   showmessage(list2[0]);  ///dag

   list.Free;
   list2.Free;

end;

procedure TForm1.CheckBox1Click(Sender: TObject);
begin
//chart1.View3D:= true;

if (checkbox1.Checked = true) then
    begin
      checkbox1.Checked := true;
      chart1.View3D:= true;


    end else
    begin
      checkbox1.Checked := false;
      chart1.View3D:= false;
    end;

end;

procedure TForm1.CheckBox2Click(Sender: TObject);
begin
     if (checkbox2.Checked = true) then
    begin
       chart1.Axes.Left.Logarithmic:= true;
       chart1.Axes.Left.LogarithmicBase:=StrToFloat(edit4.text);
       //chart1.Axes.Left.LogarithmicBase.Exponent;
    end
    else
    begin
      chart1.Axes.Left.Logarithmic:= false;
    end;
end;

procedure TForm1.Edit4Change(Sender: TObject);
begin
    chart1.Axes.Left.LogarithmicBase:=StrToFloat(edit4.text);
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  memo5.Lines.LoadFromFile('key.txt');
  edit1.Text:= memo5.lines[0];
  edit2.Text:= memo5.lines[1];
end;

function getthingid(name:string):string;
var
i:integer;
begin

  for I := 0 to form1.StringGrid1.RowCount -1 do
    begin
     if (name = form1.StringGrid1.Cells[0,i]) then
     begin
       result := form1.StringGrid1.Cells[1,i];
       exit;
     end;

    end;


end;



procedure TForm1.ListBox1Click(Sender: TObject);
begin
Edit5.Text:= getthingid(ListBox1.Items.Strings[ListBox1.ItemIndex]);
memo2.Clear;
getDevicesproperty(edit5.text);
end;

procedure TForm1.TrackBar1Change(Sender: TObject);
begin
/// rotation chart
///
chart1.View3DOptions.Rotation := trackbar1.Position;
end;

procedure TForm1.TrackBar2Change(Sender: TObject);
begin
 chart1.View3DOptions.Elevation := trackbar2.Position;
end;

procedure TForm1.TrackBar3Change(Sender: TObject);
begin
  chart1.View3DOptions.Perspective := trackbar3.Position;
end;

end.
